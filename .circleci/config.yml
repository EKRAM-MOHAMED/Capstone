version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.12.0
  
executors:
  python:
    docker:
      - image: circleci/python:3.7.3-stretch
  aws:
    docker:
      - image: amazon/aws-cli

jobs:
  lint:
    executor: python
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python3 -m venv capstone
            . capstone/bin/activate
            make install
            # Install hadolint
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            sudo chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            . capstone/bin/activate
            make lint  
  
  docker-image-build-push:
    machine: true
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: build and push docker image
          command: |
            #Login to docker hub
            docker login --username $DOCKERHUB_USER --password $DOCKERHUB_PWD
            # Build image and add a descriptive tag
            docker build --tag=capstone .
            # List docker images
            docker image ls
            # Push image to a docker repository
            docker tag capstone ekram321/capstone
            docker push ekram321/capstone
            
  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
            
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''
  
  deploy-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          capstone-cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: deployment.yml
          resource-name: deployment/capstone
  
  check-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          capstone
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: check cluster
          command: |
            kubectl get pods
            kubectl get deployment
            kubectl get services

workflows:
  deployment:
    jobs:
      - lint
      - docker-image-build-push:
          requires:
            - lint
            
      - create-cluster:
          cluster-name: capstone
          requires:
            - docker-image-build-push
            
      - deploy-cluster:
          cluster-name: capstone
          requires:
            - create-cluster
            
      - aws-eks/update-container-image:
          cluster-name: capstone
          container-image-updates: capstone=ekram321/capstone
          post-steps:
              - kubernetes/delete-resource:
                  resource-names: capstone
                  resource-types: deployment
                  wait: true
          record: true
          requires:
            - deploy-cluster
          resource-name: deployment/capstone
          
      - check-cluster:
          cluster-name: capstone
          requires: 
            - aws-eks/update-container-image
          
      #- aws-eks/delete-cluster:
      #    cluster-name: capstone
      #    requires: [check-cluster]